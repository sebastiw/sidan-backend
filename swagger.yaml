openapi: 3.0.1
info:
  title: Sidan API.
  description: |-
    Backend f√∂r sidan.
  license:
    name: MIT
    url: http://opensource.org/licenses/MIT
  version: 0.0.1
servers:
  - url: http://chalmerslosers.com:30880
  - url: http://localhost:8080
paths:
  /auth/{provider}:
    get:
      summary: Get an authorization code from a provider
      description: |-
        Login with provider and get an authorization code.
        Will automatically redirect to /auth/{provider}/authorized, which will
        in turn exchange the code for an access token.
      operationId: authProvider
      parameters:
        - name: provider
          in: path
          description: Provider to login with.
          required: true
          schema:
            $ref: '#/components/schemas/Provider'
      responses:
        307:
          description: |-
            Redirect to /auth/{provider}/authorized.
            The authorization step went well.
        500:
          description: Internal server error, couldn't save the session
  /auth/{provider}/authorized:
    get:
      summary: Exchange Authorization token
      description: |-
        Exchange Authorization token with an Access token.
      operationId: authProviderAuthorized
      parameters:
        - name: provider
          in: path
          description: Provider to check.
          required: true
          schema:
            $ref: '#/components/schemas/Provider'
        - name: state
          in: query
          description: Login state. Need to be verified against the state parameter in /auth/{provider}.
          required: true
          schema:
            type: string
        - name: code
          in: query
          description: Login code.
          required: true
          schema:
            type: string
      responses:
        307:
          description: OK, redirect to /.
        500:
          description: Internal Server Error, couldn't get session, save session, incorrect state, or bad or aborted exchange request.
  /auth/{provider}/verifyemail:
    get:
      summary: Verify the user email
      description: |-
        Verify the user email from provider with the user email in the database.
      operationId: getAuthenticatedEmails
      parameters:
        - name: provider
          in: path
          description: Provider to check.
          required: true
          schema:
            $ref: '#/components/schemas/Provider'
      security:
        - oAuth2Google: []
        - oAuth2Github: []
      responses:
        307:
          description: OK, redirects back to root.
        401:
          description: Unauthorized
        500:
          description: Internal Server Error, couldn't save session, or get emails from provider.
  /auth/getusersession:
    get:
      summary: Get the user session
      description: |-
        Check if user is session is authorized, and return the user session.
      operationId: getUserSession
      responses:
        200:
          description: OK, redirects back to root.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSession'
        401:
          description: Unauthorized
        500:
          description: Internal Server Error, couldn't get session, or variables from session.
  /file/image:
    post:
      tags:
        - image
      security:
        - sidanOAuth:
          - write:image
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                data:
                  type: string
                  format: binary
      responses:
        200:
          description: File descriptor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileDescriptor'
  /file/{filename}:
    get:
      tags:
        - image
      parameters:
        - name: filename
          in: path
          description: Provider to check.
          required: true
          schema:
            type: string
      responses:
        200:
          description: Serve a static image
  /mail:
    post:
      tags:
        - mail
      security:
        - sidanOAuth:
          - write:email
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MailDescriptor'
      responses:
        200:
          description: The mail has been sent
  /db/entries:
    get:
      tags:
        - entry
      parameters:
        - name: skip
          in: query
          schema:
            type: integer
            format: int64
            default: 0
        - name: take
          in: query
          schema:
            type: integer
            format: int64
            default: 20
      responses:
        200:
          description: an array of Entry
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Entry'
    post:
      tags:
        - entry
      description: Create on new entry
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Entry'
      responses:
        200:
          description: Entries
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Entry'
  /db/members:
    get:
      tags:
        - member
      security:
        - sidanOAuth:
          - read:member
        - {}
      parameters:
        - name: valid
          description: Only get valid numbers
          in: query
          schema:
            type: boolean
            default: false
      responses:
        200:
          description: an array of Member
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Member'
    post:
      tags:
        - member
      security:
        - sidanOAuth:
          - write:member
      description: Create on new member
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Member'
      responses:
        200:
          description: Members
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Member'
components:
  securitySchemes:
    sidanOAuth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: /auth/{provider}
          scopes:
            write:email: Gain ability to write emails.
            write:image: Upload images
            write:member: Update information on members
            read:member: Read detailed information about members
            modify:entry: Delete or update entries
    oAuth2Google:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: /auth/google
          tokenUrl: /auth/google/authorized
          scopes:
            {}
    oAuth2Github:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: /auth/github
          tokenUrl: /auth/github/authorized
          scopes:
            {}
  schemas:
    Provider:
      type: string
      enum:
        - google
        - github
    UserSession:
      type: object
      properties:
        scopes:
          type: array
          items:
            type: string
            enum:
              - write:email
              - write:image
              - write:member
              - modify:entry
              - read:member
    FileDescriptor:
      type: object
      properties:
        filename:
          type: string
    MailDescriptor:
      type: object
      properties:
        from_email:
          type: string
          format: email
        to_emails:
          type: array
          items:
            type: string
            format: email
        message:
          type: string
        title:
          type: string
    Entry:
      type: object
      required:
        - msg
        - sig
      properties:
        id:
          type: integer
        date:
          type: string
          format: date
        time:
          type: string
        datetime:
          type: string
          format: date-time
        msg:
          type: string
        status:
          type: integer
        cl:
          type: integer
        sig:
          type: string
        email:
          type: string
          format: email
        place:
          type: string
        ip:
          type: string
          format: ipv4
        host:
          type: string
        olsug:
          type: integer
        enheter:
          type: integer
        lat:
          type: number
          format: double
        lon:
          type: number
          format: double
        report:
          type: boolean
        likes:
          type: integer
        secret:
          type: boolean
        personal_secret:
          type: boolean
        side_kicks:
          type: array
          items:
            $ref: '#/components/schemas/SideKick'
    SideKick:
      type: object
      properties:
        number:
          type: string
          format: int64
    Member:
      type: object
      required:
        - number
      properties:
        address:
            type: string
        address_url:
            type: string
        email:
            type: string
        history:
            type: string
        id:
            format: int64
            type: integer
        im:
            type: string
        is_valid:
            type: boolean
        name:
            type: string
        number:
            type: string
        password:
            type: string
        password_classic:
            type: string
        password_classic_resetstring:
            type: string
        password_resetstring:
            type: string
        phone:
            type: string
        picture:
            type: string
        title:
            type: string
    Prospect:
      type: object
      properties:
        email:
            type: string
        history:
            type: string
        id:
            format: int64
            type: integer
        name:
            type: string
        number:
            format: int64
            type: integer
        phone:
            type: string
        status:
            type: string
