openapi: 3.0.1
info:
  title: Sidan API.
  description: |-
    Backend f√∂r sidan.
  license:
    name: MIT
    url: http://opensource.org/licenses/MIT
  version: 0.0.1
servers:
  - url: http://chalmerslosers.com:30880
  - url: http://localhost:8080
paths:
  /auth/{provider}:
    get:
      summary: Login with provider.
      description: |-
        Login with provider.
      operationId: authProvider
      parameters:
        - name: provider
          in: path
          description: Provider to login with.
          required: true
          schema:
            $ref: '#/components/schemas/Provider'
        - name: state
          in: query
          description: Login state.
          required: true
          schema:
            type: string
        - name: code
          in: query
          description: Login code.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    description: JWT token.
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error message.
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error message.
  /auth/{provider}/authorized:
    get:
      summary: Check if provider is authorized.
      description: |-
        Check if provider is authorized.
      operationId: authProviderAuthorized
      parameters:
        - name: provider
          in: path
          description: Provider to check.
          required: true
          schema:
            $ref: '#/components/schemas/Provider'
        - name: state
          in: query
          description: Login state.
          required: true
          schema:
            type: string
        - name: code
          in: query
          description: Login code.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  authorized:
                    type: boolean
                    description: If provider is authorized.
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error message.
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error message.
  /file/image:
    post:
      tags:
        - image
      security:
        - oAuth2Google:
          - write:image
        - oAuth2Github:
          - write:image
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                data:
                  type: string
                  format: binary
      responses:
        200:
          description: File descriptor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileDescriptor'
  /file/{filename}:
    get:
      tags:
        - image
      parameters:
        - name: filename
          in: path
          description: Provider to check.
          required: true
          schema:
            type: string
      responses:
        200:
          description: Serve a static image
  /mail:
    post:
      tags:
        - mail
      security:
        - oAuth2Google:
          - write:email
        - oAuth2Github:
          - write:email
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MailDescriptor'
      responses:
        200:
          description: The mail has been sent
  /db/entries:
    get:
      tags:
        - entry
      parameters:
        - name: skip
          in: query
          schema:
            type: integer
            format: int64
            default: 0
        - name: take
          in: query
          schema:
            type: integer
            format: int64
            default: 20
      responses:
        200:
          description: an array of Entry
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Entry'
    post:
      tags:
        - entry
      description: Create on new entry
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Entry'
      responses:
        200:
          description: Entries
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Entry'
  /db/members:
    get:
      tags:
        - member
      security:
        - oAuth2Google:
          - read:member
        - oAuth2Github:
          - read:member
        - {}
      parameters:
        - name: valid
          description: Only get valid numbers
          in: query
          schema:
            type: boolean
            default: false
      responses:
        200:
          description: an array of Member
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Member'
    post:
      tags:
        - member
      security:
        - oAuth2Google:
          - write:member
        - oAuth2Github:
          - write:member
      description: Create on new member
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Member'
      responses:
        200:
          description: Members
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Member'
components:
  securitySchemes:
    oAuth2Google:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: auth/google
          scopes:
            write:email: Gain ability to write emails.
            write:image: Upload images
            write:member: Update information on members
            read:member: Read detailed information about members
        authorizationCode:
          authorizationUrl: auth/google
          tokenUrl: auth/google/authorized
          scopes:
            write:email: Gain ability to write emails.
            write:image: Upload images
            write:member: Update information on members
            read:member: Read detailed information about members
    oAuth2Github:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: auth/github
          scopes:
            write:email: Gain ability to write emails.
            write:image: Upload images
            write:member: Update information on members
            read:member: Read detailed information about members
        authorizationCode:
          authorizationUrl: auth/github
          tokenUrl: auth/github/authorized
          scopes:
            write:email: Gain ability to write emails.
            write:image: Upload images
            write:member: Update information on members
            read:member: Read detailed information about members
  schemas:
    Provider:
      type: string
      enum:
        - google
        - github
    FileDescriptor:
      type: object
      properties:
        filename:
          type: string
    MailDescriptor:
      type: object
      properties:
        from_email:
          type: string
          format: email
        to_emails:
          type: array
          items:
            type: string
            format: email
        message:
          type: string
        title:
          type: string
    Entry:
      type: object
      required:
        - msg
        - sig
      properties:
        id:
          type: integer
        date:
          type: string
          format: date
        time:
          type: string
        datetime:
          type: string
          format: date-time
        msg:
          type: string
        status:
          type: integer
        cl:
          type: integer
        sig:
          type: string
        email:
          type: string
          format: email
        place:
          type: string
        ip:
          type: string
          format: ipv4
        host:
          type: string
        olsug:
          type: integer
        enheter:
          type: integer
        lat:
          type: number
          format: double
        lon:
          type: number
          format: double
        report:
          type: boolean
        likes:
          type: integer
        secret:
          type: boolean
        personal_secret:
          type: boolean
        side_kicks:
          type: array
          items:
            $ref: '#/components/schemas/SideKick'
    SideKick:
      type: object
      properties:
        number:
          type: string
          format: int64
    Member:
      type: object
      required:
        - number
      properties:
        address:
            type: string
        address_url:
            type: string
        email:
            type: string
        history:
            type: string
        id:
            format: int64
            type: integer
        im:
            type: string
        is_valid:
            type: boolean
        name:
            type: string
        number:
            type: string
        password:
            type: string
        password_classic:
            type: string
        password_classic_resetstring:
            type: string
        password_resetstring:
            type: string
        phone:
            type: string
        picture:
            type: string
        title:
            type: string
    Prospect:
      type: object
      properties:
        email:
            type: string
        history:
            type: string
        id:
            format: int64
            type: integer
        name:
            type: string
        number:
            format: int64
            type: integer
        phone:
            type: string
        status:
            type: string

